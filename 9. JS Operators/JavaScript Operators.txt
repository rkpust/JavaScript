JavaScript Operators
Example:

Assign values to variables and add them together: JS-Add-Assignment.html

The assignment operator (=) assigns a value to a variable.
Assignment:

let x = 10; 


The multiplication operator (*) multiplies numbers.
Multiplying:

let x = 5;
let y = 2;
let z = x * y;

-----------------------------------------------------------------------

Types of JavaScript Operators

There are different types of JavaScript operators:

    * Aritmetic Operators
    * Assignment Operators
    * Comparison Operators
    * Logical Operators
    * Conditional Operators
    * Type Operators

------------------------------------------------------------------------

JavaScript Arithmetic Operators

Arithmetic operators are used to perform arithmetic on numbers:

Operator 	Description

+ 	        Addition
- 	        Subtraction
* 	        Multiplication
** 	        Exponentiation (ES2016)
/ 	        Division
% 	        Modulus (Division Remainder)
++ 	        Increment
-- 	        Decrement

------------------------------------------------------------------

JavaScript Assignment Operators

Assignment operators assign values to JavaScript variables.
Operator 	Example 	Same As

= 	        x = y 	    x = y
+= 	        x += y 	    x = x + y
-= 	        x -= y 	    x = x - y
*= 	        x *= y 	    x = x * y
/= 	        x /= y 	    x = x / y
%= 	        x %= y 	    x = x % y
**= 	    x **= y 	x = x ** y

The addition assignment operator (+=) adds a value to a variable.
Assignment:

let x = 10;
x += 5; 

------------------------------------------------------------------

Exponentiation Operator: JS-Exponentiation.html

------------------------------------------------------------------

Adding JavaScript Strings

The + operator can also be used to add (concatenate) strings.
Example: JS-Add-Strings.html

The += assignment operator can also be used to add (concatenate) strings:
Example:

let text1 = "What a very ";
text1 += "nice day";

The result of text1 will be:
What a very nice day


#Note: When used on strings, the + operator is called the concatenation operator.

---------------------------------------------------------------------------------

Adding Strings and Numbers

Adding two numbers, will return the sum, but adding a number and a string will return a string:
Example: JS-Add-Number-String.html

#Note: If you add a number and a string, the result will be a string!

---------------------------------------------------------------------

JavaScript Comparison Operators

Operator 	Description

== 	        equal to
=== 	    equal value and equal type
!= 	        not equal
!== 	    not equal value or not equal type
> 	        greater than
< 	        less than
>= 	        greater than or equal to
<= 	        less than or equal to
? 	        ternary operator


---------------------------------------------------

JavaScript Logical Operators

Operator 	Description

&& 	        logical and
|| 	        logical or
! 	        logical not

----------------------------------------------------


JavaScript Type Operators
Operator 	Description

typeof 	    Returns the type of a variable
instanceof 	Returns true if an object is an instance of an object type

----------------------------------------------------------------------

JavaScript Bitwise Operators

Bit operators work on 32 bits numbers.
Any numeric operand in the operation is converted into a 32 bit number. The
result is converted back to a JavaScript number.

Operator 	Description 	      Example 	Same as 	   Result 	Decimal

& 	        AND 	              5 & 1 	0101 & 0001    0001 	 1
| 	        OR 	                  5 | 1 	0101 | 0001    0101 	 5
~ 	        NOT 	              ~ 5 	    ~0101 	1010   10
^ 	        XOR 	              5 ^ 1 	0101 ^ 0001    0100 	 4
<< 	        left shift 	          5 << 1 	0101 << 1 	   1010 	 10
>> 	        right shift 	      5 >> 1 	0101 >> 1 	   0010 	 2
>>> 	    unsigned right shift  5 >>> 1 	0101 >>> 1 	   0010 	 2



#Note:
The examples above uses 4 bits unsigned examples. But JavaScript uses 32-bit signed numbers.
Because of this, in JavaScript, ~ 5 will not return 10. It will return -6.
~00000000000000000000000000000101 will return 11111111111111111111111111111010
