JavaScript Arithmetic Operators

Arithmetic operators perform arithmetic on numbers (literals or variables).

Operator 	Description
+ 	        Addition
- 	        Subtraction
* 	        Multiplication
** 	        Exponentiation (ES2016)
/ 	        Division
% 	        Modulus (Remainder)
++ 	        Increment
-- 	        Decrement

---------------------------------------------------------------------------

Arithmetic Operations

A typical arithmetic operation operates on two numbers.

The two numbers can be literals:
Example:
let x = 100 + 50;

or variables:
Example:
let x = a + b;

or expressions:
Example:
let x = (100 + 50) * a; 

---------------------------------------------------------

Operators and Operands

The numbers (in an arithmetic operation) are called operands.

The operation (to be performed between the two operands) is defined by an operator.

Operand 	Operator 	Operand
100 	       + 	    50

-----------------------------------------------------------------------------------

Adding

The addition operator (+) adds numbers: JS-addition.html

--------------------------------------------------------

Subtracting

The subtraction operator (-) subtracts numbers.
Example: JS-subtraction.html

----------------------------------------------

Multiplying

The multiplication operator (*) multiplies numbers.
Example: JS-multiplication.html

----------------------------------------------

Dividing

The division operator (/) divides numbers.
Example: JS-division.html

------------------------------------------

Remainder

The modulus operator (%) returns the division remainder.
Example: JS-modulus.html


#Note:

*In arithmetic, the division of two integers produces a quotient and a remainder.

*In mathematics, the result of a modulo operation is the remainder of an arithmetic division.

---------------------------------------------------------------------------------------------

Incrementing

The increment operator (++) increments numbers.
Example: JS-increment.html

-------------------------------------
Decrementing

The decrement operator (--) decrements number.
Example: JS-decrement.html


--------------------------------------------

Exponentiation

The exponentiation operator (**) raises the first operand to the power of the second operand.
Example: JS-exponentiation .html


x ** y produces the same result as Math.pow(x,y): JS-power-function.html

------------------------------------------------------------------------

Operator Precedence

Operator precedence describes the order in which operations are performed in an arithmetic expression.

Example:
let x = 100 + 50 * 3;

Is the result of example above the same as 150 * 3, or is it the same as 100 + 150?

Is the addition or the multiplication done first?

As in traditional school mathematics, the multiplication is done first.

Multiplication (*) and division (/) have higher precedence than addition (+) and subtraction (-).

And (as in school mathematics) the precedence can be changed by using parentheses:
Example:
let x = (100 + 50) * 3;

When using parentheses, the operations inside the parentheses are computed first.

When many operations have the same precedence (like addition and subtraction), they are computed from left to right:
Example:
let x = 100 + 50 - 3;

Example: JS-precedence.html